{
  "name": "vineapple",
  "version": "0.1.3",
  "author": {
    "name": "Dave Furfero",
    "email": "furf@furf.com"
  },
  "description": "A simple Vine API client for Node.js",
  "dependencies": {
    "request": "~2.25.0",
    "lodash": "~1.3.1",
    "colors": "~0.6.1",
    "q": "~0.9.6",
    "pkginfo": "~0.3.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/furf/vineapple.git"
  },
  "readme": "# vineapple\n\n## A simple Vine API client for Node.js\n\n*This library provides access to the undocumented official Vine API. It is not sanctioned by Vine nor guaranteed by the author.*\n\n* Read-only Vine API access to the following endpoints:\n\t* `users/authenticate` Authenticate/deauthenticate user\n\t* `users/me` - Account settings for the authenticated user\n\t* `users/$userId/pendingNotificationsCount` - Count of pending notifications (authenticated user only)\n\t* `timelines/graph` - Timeline of accounts followed by the authenticated user\n\t* `users/search/$query` - Search for users\n\t* `users/profiles/$userId` - User profile\n\t* `timelines/users/$userId` - Timeline of vines posted by a user\n\t* `timelines/users/$userId/likes` - Timeline of vines liked by a user\n\t* `posts/$postId/likes` - Like/unlike a vine\n\t* `users/$userId/followers` - List of users following a user\n\t* `users/$userId/following` - List of users followed by a user\n\t* `users/$userId/following/suggested/twitter` - List of suggested Twitter accounts\n\t* `timelines/popular` - Timeline of popular vines\n\t* `timelines/promoted` - Timeline of promoted vines\n\t* `tags/search/$query` - Search for #hashtags\n\t* `timelines/tags/$tag` - Timeline of vines by #hashtag\n\t* `timelines/venues/$venueId` - Timeline of vines by venue\n* Flexible API supports Node.js-style callbacks *and* Promises/A+ (via [q](https://github.com/kriskowal/q))\n* Pagination support\n\n## Installation\n\n### Using NPM\n\n```\nnpm install vineapple\n```\n### Using Git\n\n```\ngit clone https://github.com/furf/vineapple.git\n```\n\n## Getting Started\n\n```javascript\nvar Vineapple = require('vineapple');\n\n// Instantiate a Vine API client\nvar vine = new Vineapple();\n\n// Authenticate the Vine user\nvine.login('ananas', 'c0m0$u$', function (error, client) {\n\n\t// Make an API request\n\tclient.me(function (error, user) {\n\n\t\t// Handle failure\n\t\tif (error) {\n    \t\t\tthrow new Error(error);\n\t\t }\n\n\t\t// Handle success\n\t\tconsole.log(user);\n\t});\n  \n});\n```\n\n## Instantiation\n\nA Vineapple API client can be instantiated in one of two ways:\n\n1. Using the Vineapple constructor function.\n\n\t```javascript\n\tvar vine = new Vineapple();\n\t```\n2. Using the Vineapple factory method.\n\n\t```javascript\n\tvar vine = Vineapple.create();\n\t```\n\nWhich you use is a matter of subjective choice.\n\n## Authentication\n\nBefore a client can make API requests, it must be authenticated and authorized. Authentication\n\n```javascript\n// Instantiate a Vine API client\nvar vine = new Vineapple();\n\n// Authenticate the user\nvine.login('ananas', 'c0m0$u$', function (error, client) {\n\n  // Make an API request\n  client.me(function (error, user) {\n    // ...\n  });\n  \n});\n```\n\n```javascript\nVineapple.login('ananas', 'c0m0$u$', function (error, client) { /* ... */ });\n```\n\n## Authenticated Instances\n\nIn cases where you have cached the user's API settings, you can authorize the client immediately. Note: this will not guarantee authorization if the client has been previously deauthorized.\n\n```javascript\nvar vine = new Vineapple({\n  key: '0123456789abcdef01-23456789-abcd-ef01-2345-6789abcdef01',\n  userId: '901234567890123456',\n  username: 'Ananas Comosus'\n});\n```\n\t\n```javascript\nvar vine = Vineapple.create({\n  key: '0123456789abcdef01-23456789-abcd-ef01-2345-6789abcdef01',\n  userId: '901234567890123456',\n  username: 'Ananas Comosus'\n});\n```\n\n## Node-style Callbacks vs. Promises\n\nIn most cases, how you handle the response is a matter of personal preference. This is not the place for that debate. Vineapple is flexible enough to let you leverage both techniques.\n\n### Node-style Callbacks\n\n```javascript\nvine.searchTags('skateboarding', function (error, response) {\n\t\n\t// Handle failure\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\n\t\t\n\t// Handle success\n\tvar tags = response.records;\n\t\n\ttags.forEach(function (t) {\n\t\tconsole.log(t.tag);\n\t});\n});\n```\n\n### Promises\n\n```javascript\nvine.searchTags('skateboarding').then(function (response) {\n\t\t\n\t// Handle success\n\tvar tags = response.records;\n\t\n\ttags.forEach(function (t) {\n\t\tconsole.log(t.tag);\n\t});\n\n}).fail(function (error) {\n\n\t// Handle failure\n\tif (error) {\n\t\tthrow new Error(error);\n\t}\n});\n```\n\n## API\n\n### Static Properties\n\n* **Vineapple.API_ORIGIN**\n`\"https://api.vineapp.com/\"`\n* **Vineapple.X_VINE_CLIENT**\n`\"ios/1.3.1\"`\n* **Vineapple.ACCEPT_LANGUAGE**\n`\"en;q=1, fr;q=0.9, de;q=0.8, ja;q=0.7, nl;q=0.6, it;q=0.5\"`\n* **Vineapple.USER_AGENT**\n`\"iphone/1.3.1 (iPhone; iOS 6.1.3; Scale/2.00)\"`\n* **Vineapple.DEVICE_TOKEN**\n* **Vineapple.DEVICE_TOKEN_SEED**\n`\"Ananas comosus\"`\n\n### Static Methods\n\n* **new Vineapple(client)**\n**Vineapple.create(client)**\n* **Vineapple.login(username, password, callback)**\n\n### Instance Methods\n\n_In most cases, **options** refers to pagination configuration with two optional settings: page and size (results per page)._\n\n* **vineapple.request(options, callback)**\n* **vineapple.authorize(settings)** - Set/unset a user's credentials\n* **vineapple.login(username, password, callback)**\n`POST users/authenticate` - Authenticate a user\n* **vineapple.logout(callback)**\n`DELETE users/authenticate` - Deauthenticate a user\n* **vineapple.me(callback)**\n`GET users/me` - Account settings for the authenticated user\n* **vineapple.notifications(callback)**\n`GET users/$userId/pendingNotificationsCount` - Count of pending notifications (authenticated user only)\n* **vineapple.graph(options, callback)**\n`GET timelines/graph` - Timeline of accounts followed by the authenticated user\n* **vineapple.searchUsers(query, options, callback)**\n`GET users/search/$query` - Search for users\n* **vineapple.profile(userId, callback)**\n`GET users/profiles/$userId` - User profile\n* **vineapple.user(userId, options, callback)**\n`GET timelines/users/$userId` - Timeline of vines posted by a user\n* **vineapple.likes(userId, options, callback)**\n`GET timelines/users/$userId/likes` - Timeline of vines liked by a user\n* **vineapple.like(postId, callback)**\n`POST posts/$postId/likes` - Like/unlike a vine\n* **vineapple.unlike(postId, callback)**\n`DELETE posts/$postId/likes` - Like/unlike a vine\n* **vineapple.followers(userId, options, callback)**\n`GET users/$userId/followers` - List of users following a user\n* **vineapple.following(userId, options, callback)**\n`GET users/$userId/following` - List of users followed by a user\n* **vineapple.twitter(userId, callback)**\n`GET users/$userId/following/suggested/twitter` - List of suggested Twitter accounts\n* **vineapple.popular(options, callback)**\n`GET timelines/popular` - Timeline of popular vines\n* **vineapple.promoted(options, callback)**\n`GET timelines/promoted` - Timeline of promoted vines\n* **vineapple.searchTags(query, options, callback)**\n`GET tags/search/$query` - Search for #hashtags\n* **vineapple.tag(tag, options, callback)**\n`GET timelines/tags/$tag` - Timeline of vines by #hashtag\n* **vineapple.venue(venue, options, callback)**\n`GET timelines/venues/$venueId` - Timeline of vines by venue\n\n## etc.\n\n* Licence: MIT\n* Author [Dave Furfero](https://github.com/furf)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/furf/vineapple/issues"
  },
  "homepage": "https://github.com/furf/vineapple",
  "_id": "vineapple@0.1.3",
  "_shasum": "d524e3497c202a1d4904dbc47a8499d447d3186a",
  "_from": "vineapple@",
  "_resolved": "https://registry.npmjs.org/vineapple/-/vineapple-0.1.3.tgz"
}
